spring.datasource.url=jdbc:h2:mem:mydb
spring.datasource.username=sa

spring.jpa.show-sql=true

#####automatyczne dodawanie bazy danych :)
spring.jpa.hibernate.ddl-auto=update

#dane logowania
security.user.name=admin
security.user.password=pswd


#The underlying logic usually accesses our database with some kind of connection pool. If our code needs to send a query, it gets a connection from the pool, 
#and when it is done, it gives it back. However, what can happen due to network issues, DB timeouts, etc., is that the connection gets stale. 
#If the connection is stale, it is essentially dead and can not be used. Typically, the pool does not clean them up, and the next time we use a connection, it might hand us the broken one. However, we can tell the pool to check each connection before using it.

spring.datasource.test-on-borrow=true
spring.datasource.validation-query=SELECT 1

#plik ze słowami 
sbb.spamwords.filename=src/main/resources/words.spam



# spring.datasource.test-on-borrow enables the check for valid connections spring.datasource.validation-query defines a query for the check.
#The check does come with a drawback, though–a minor loss in performance. Depending on a particular scenario, it might be noticeable.

#security.basic.enabled=false


####ObjectMapper provides the core functionality, and we can change the way it serializes and deserializes the JSON.
#Spring Boot, or better the auto-configurer by Spring MVC, will automatically create and add a ObjectMapper to the context. 
#This one is preconfigured to ignore unknown properties on deserialization (FAIL_ON_UNKNOWN_PROPERTIES in Jackson) and also loads various modules like Java 8 Dates support for Jackson if they are available on the classpath. Java 8 Dates are auto configured when we use Spring Boot 2.
#For many cases, it is sufficient enough to rely on the preconfigured version. If we need to adjust it, we can either do it by adding some properties to the application.properties or by overriding the bean in the Spring Context directly.
#### Configure Jackson by Properties
#Spring Boot makes the Jackson properties available under the prefix spring.jackson. For example, two of the most common use cases are:
#erializing Java Dates and Times as Strings
#Changing the property naming in JSON (from default CamelCase to Underscores)
#We can change them as follows:
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.property-naming-strategy=CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES
#Listing all properties here is a waste of space, you can always find them in the Spring Boot documentation.










##########inny konfig
#spring.datasource.url=jdbc:postgresql://localhost:5432/commentstore
#spring.datasource.username=postgres
#spring.datasource.password=password

#wstepny konfig do bazy startującej jako servis (odrebnie instalowanej)
#spring.h2.console.enabled=true
#spring.datasource.platform=h2
#spring.datasource.driverClassName = org.h2.Driver
#spring.datasource.url=jdbc:h2:file:~/test;
#spring.datasource.username=sa
#spring.datasource.password=